{"version":3,"file":"lists-CgPfpDW-.js","sources":["../lib/codemirror-kit/decorations.ts","../src/editor/extensions/lists.ts"],"sourcesContent":["import { syntaxTree } from '@codemirror/language'\nimport { type EditorState, type Range, type RangeCursor, RangeSet, StateField, type Transaction } from '@codemirror/state'\nimport { Decoration, EditorView, type WidgetType } from '@codemirror/view'\nimport { type SyntaxNodeRef } from '@lezer/common'\n\n// Todo: Maybe open a PR to expose these types.\n// https://github.com/codemirror/view/blob/3f1b991f3db20d152045ae9e6872466fc8d8fdac/src/decoration.ts\nexport type LineDecorationSpec = { attributes?: { [key: string]: string }, class?: string, [other: string]: any }\nexport type MarkDecorationSpec = { attributes?: { [key: string]: string }, class?: string, inclusive?: boolean, inclusiveEnd?: boolean, inclusiveStart?: boolean, tagName?: string, [other: string]: any }\nexport type ReplaceDecorationSpec = { block?: boolean, inclusive?: boolean, inclusiveEnd?: boolean, inclusiveStart?: boolean, widget?: WidgetType, [other: string]: any }\nexport type WidgetDecorationSpec = { widget: WidgetType, block?: boolean, side?: number, [other: string]: any }\n\nexport type Defined<T> = Required<{\n  [K in keyof T]: NonNullable<T[K]>\n}>\n\n// Custom types.\nexport type CustomDecorationArgs = Parameters<typeof Decoration.mark>[0]\nexport type CustomDecoration<T> = T & Decoration\nexport type CustomDecorationTypes = 'line' | 'mark' | 'replace' | 'widget'\nexport type CustomWidget<T> = T & WidgetSpec\nexport type CustomWidgetArgs<T extends PartialWidgetSpec> = {\n  [K in keyof T]?: K extends 'eq' ? (other: CustomWidget<Defined<T>>) => boolean : T[K]\n}\nexport type CustomWidgetOptions<T extends PartialWidgetSpec> = {\n  [K in keyof T]: K extends 'compare' | 'eq' ? (other: CustomWidget<Defined<T>>) => boolean : T[K]\n}\nexport type CustomWidgetDecoration<T> = T & WidgetDecoration<T> & Decoration\nexport type CustomWidgetDecorationArgs = WidgetDecorationSpec & Record<string, any>\nexport type NodeBlockDecoration<T> = CustomWidgetDecoration<T> & { widget: { node: SyntaxNodeRef } }\nexport type NodeDecoratorArgs<T extends Decoration> = {\n  nodes: string[],\n  onMatch: (state: EditorState, node: SyntaxNodeRef) => T | T[] | void,\n  optimize?: boolean,\n  range?: {\n    from?: number,\n    to?: number,\n  },\n}\nexport type PartialWidgetSpec = Partial<WidgetSpec>\nexport type TypedDecoration = Decoration & { spec: Decoration['spec'] & { type: CustomDecorationTypes } }\nexport type WidgetSpec = WidgetType & { id?: string }\nexport type WidgetDecoration<T> = { block: boolean, side: number, widget: CustomWidget<T> }\n\nexport const buildBlockWidgetDecoration = <T extends CustomWidgetDecorationArgs>(options: T) => {\n  return buildWidgetDecoration({\n    block: true,\n    side: -1,\n    ...options,\n  })\n}\n\nexport const buildLineDecoration = <T extends MarkDecorationSpec>(options: T) => {\n  return Decoration.line({\n    ...options,\n    type: 'line',\n  }) as CustomDecoration<T>\n}\n\nexport const buildMarkDecoration = <T extends MarkDecorationSpec>(options: T) => {\n  return Decoration.mark({\n    ...options,\n    type: 'mark',\n  }) as CustomDecoration<T>\n}\n\nexport type WidgetOptions<T extends Record<string, any>> = {\n  [K in ((keyof T) | 'compare' | 'eq')]?: K extends 'compare' | 'eq' ? (other: WidgetReturn<T>) => boolean\n    : K extends keyof WidgetSpec ? WidgetSpec[K]\n    : T[K]\n}\nexport type WidgetReturn<T extends Record<string, any>> = {\n  [K in keyof (T & WidgetSpec)]: K extends keyof T ? NonNullable<T[K]>\n    : K extends keyof WidgetSpec ? WidgetSpec[K]\n    : never\n}\n\nexport const buildWidget = <T extends Record<string, any>>(options: WidgetOptions<T>): WidgetSpec => {\n  const eq = (other: WidgetReturn<T>) => {\n    if (options.eq) return options.eq(other)\n    if (!options.id) return false\n\n    return options.id === other.id\n  }\n\n  return {\n    compare: (other: WidgetReturn<T>) => {\n      return eq(other)\n    },\n    coordsAt: () => null,\n    destroy: () => {},\n    eq: (other: WidgetReturn<T>) => {\n      return eq(other)\n    },\n    estimatedHeight: -1,\n    ignoreEvent: () => true,\n    lineBreaks: 0,\n    toDOM: () => {\n      return document.createElement('span')\n    },\n    updateDOM: () => false,\n    ...options,\n  }\n}\n\nexport const buildWidgetDecoration = <T extends CustomWidgetDecorationArgs>(options: T): CustomWidgetDecoration<T> => {\n  return Decoration.widget({\n    block: false,\n    side: 0,\n    ...options,\n    widget: buildWidget({\n      ...options.widget,\n    }),\n    type: 'widget',\n  }) as CustomWidgetDecoration<T>\n}\n\nexport const buildNodeDecorations = <T extends TypedDecoration>(state: EditorState, options: NodeDecoratorArgs<T>) => {\n  const decorationRanges: Range<NodeBlockDecoration<T>>[] = []\n\n  syntaxTree(state).iterate({\n    enter: (node) => {\n      if (options.nodes.includes(node.type.name)) {\n        const maybeDecorations = options.onMatch(state, node)\n\n        if (!maybeDecorations) return\n\n        const decorations = Array<T>().concat(maybeDecorations)\n\n        decorations.forEach((decoration) => {\n          if (decoration.spec.type === 'line') {\n            const wrapped = buildLineDecoration({ ...decoration.spec, node: { ...node } })\n\n            for (let line = state.doc.lineAt(node.from); line.from < node.to; line = state.doc.lineAt(line.to + 1)) {\n              decorationRanges.push(wrapped.range(line.from))\n\n              if (line.to === state.doc.length) break\n            }\n          }\n\n          if (decoration.spec.type === 'mark') {\n            const wrapped = buildMarkDecoration({ ...decoration.spec, node: { ...node } }).range(node.from, node.to)\n\n            decorationRanges.push(wrapped)\n          }\n\n          if (decoration.spec.type === 'widget') {\n            const wrapped = buildWidgetDecoration({ ...decoration.spec, node: { ...node } }).range(node.from)\n\n            decorationRanges.push(wrapped)\n          }\n        })\n      }\n    },\n    from: options.range?.from,\n    to: options.range?.to,\n  })\n\n  return decorationRanges.sort((left, right) => {\n    return left.from - right.from\n  })\n}\n\nexport const buildOptimizedNodeDecorations = <T extends Decoration>(rangeSet: RangeSet<NodeBlockDecoration<T>>, transaction: Transaction, options: NodeDecoratorArgs<T>) => {\n  const decorations = [] as Range<NodeBlockDecoration<T>>[]\n  const cursor = rangeSet.iter()\n  const cursors = [] as RangeCursor<NodeBlockDecoration<T>>[]\n  const cursorsToSkip = [] as RangeCursor<NodeBlockDecoration<T>>[]\n\n  while (cursor.value) {\n    cursors.push({ ...cursor })\n    cursor.next()\n  }\n\n  transaction.changes.iterChangedRanges((_beforeFrom, _beforeTo, changeFrom, changeTo) => {\n    cursors.forEach((cursor) => {\n      if (cursor.value) {\n        const nodeLength = cursor.value.spec.node.to - cursor.value.spec.node.from\n        const cursorFrom = cursor.from\n        const cursorTo = cursor.from + nodeLength\n\n        if (isOverlapping(cursorFrom, cursorTo, changeFrom, changeTo)) {\n          cursorsToSkip.push(cursor)\n        }\n      }\n    })\n\n    const range = { from: changeFrom, to: changeTo }\n\n    decorations.push(...buildNodeDecorations(transaction.state, { ...options, range }))\n  })\n\n  const cursorDecos = cursors.filter(cursor => !cursorsToSkip.includes(cursor)).flatMap((cursor) => {\n    const range = cursor.value?.range(cursor.from) as Range<NodeBlockDecoration<T>>\n\n    if (!range) return []\n\n    return [range]\n  })\n\n  decorations.push(...cursorDecos)\n\n  const allDecorations = decorations.sort((left, right) => {\n    return left.from - right.from\n  })\n\n  // This reprocesses the entire state.\n  return allDecorations\n}\n\nexport const isOverlapping = (x1: number, x2: number, y1: number, y2: number) => {\n  return Math.max(x1, y1) <= Math.min(x2, y2)\n}\n\nexport const nodeDecorator = <T extends Decoration>(options: NodeDecoratorArgs<T>) => {\n  return StateField.define<RangeSet<NodeBlockDecoration<T>>>({\n    create(state) {\n      return RangeSet.of(buildNodeDecorations(state, options))\n    },\n    update(rangeSet, transaction) {\n      // Reconfiguration and state effects will reprocess the entire state to ensure nothing is missed.\n      if (transaction.reconfigured || transaction.effects.length > 0) {\n        return RangeSet.of(buildNodeDecorations(transaction.state, options))\n      }\n\n      const updatedRangeSet = rangeSet.map(transaction.changes)\n\n      if (transaction.docChanged) {\n        // Only process the ranges that are affected by this change.\n        if (options.optimize) {\n          return RangeSet.of(buildOptimizedNodeDecorations(updatedRangeSet, transaction, options))\n        }\n\n        return RangeSet.of(buildNodeDecorations(transaction.state, options))\n      }\n\n      // No need to redecorate. Instead, just map the decorations through the transaction changes.\n      return updatedRangeSet\n    },\n    provide(field) {\n      // Provide the extension to the editor.\n      return EditorView.decorations.from(field)\n    },\n  })\n}\n","import { syntaxTree } from '@codemirror/language'\nimport { StateField } from '@codemirror/state'\nimport type { EditorState, Extension, Range } from '@codemirror/state'\nimport { Decoration, EditorView, ViewPlugin } from '@codemirror/view'\nimport type { DecorationSet } from '@codemirror/view'\nimport type { SyntaxNodeRef } from '@lezer/common'\nimport { buildWidget } from '/lib/codemirror-kit'\n\nconst tabSize = 2\n\nconst spacerWidget = () => {\n  return buildWidget({\n    toDOM: () => {\n      const spacer = document.createElement('span')\n\n      spacer.className = 'ink-mde-indent'\n      spacer.style.width = `2rem`\n      spacer.style.textDecoration = 'none'\n      spacer.style.display = 'inline-flex'\n\n      const spacerLine = document.createElement('span')\n\n      spacerLine.className = 'ink-mde-indent-marker'\n      spacerLine.innerHTML = '&nbsp;'\n\n      spacer.appendChild(spacerLine)\n\n      return spacer\n    },\n  })\n}\n\nconst createWrapper = () => {\n  const wrapper = document.createElement('label')\n\n  wrapper.setAttribute('aria-hidden', 'true')\n  wrapper.setAttribute('tabindex', '-1')\n  wrapper.className = 'ink-mde-list-marker'\n  wrapper.style.minWidth = '2rem'\n\n  return wrapper\n}\n\nconst taskWidget = (isChecked: boolean) => buildWidget({\n  eq: (other) => {\n    return other.isChecked === isChecked\n  },\n  ignoreEvent: () => false,\n  isChecked,\n  toDOM: () => {\n    const wrapper = createWrapper()\n    const input = document.createElement('input')\n\n    input.setAttribute('aria-hidden', 'true')\n    input.setAttribute('tabindex', '-1')\n    input.className = 'ink-mde-task-marker'\n    input.type = 'checkbox'\n    input.checked = isChecked\n\n    wrapper.classList.add('ink-mde-task')\n\n    wrapper.appendChild(input)\n\n    return wrapper\n  },\n})\n\nconst dotWidget = () => {\n  return buildWidget({\n    toDOM: () => {\n      const wrapper = createWrapper()\n\n      wrapper.setAttribute('inert', 'true')\n      wrapper.innerHTML = '&bull;'\n\n      return wrapper\n    },\n  })\n}\n\nconst numberWidget = (marker: string) => {\n  return buildWidget({\n    toDOM: () => {\n      const wrapper = createWrapper()\n      const content = document.createElement('span')\n\n      wrapper.setAttribute('inert', 'true')\n\n      wrapper.appendChild(content)\n\n      content.setAttribute('aria-hidden', 'true')\n      content.setAttribute('tabindex', '-1')\n      content.className = 'ink-mde-number-marker'\n      content.innerHTML = `${marker}`\n\n      return wrapper\n    },\n  })\n}\n\nconst getVals = (state: EditorState, { from, to, type }: SyntaxNodeRef) => {\n  // Todo: Determine whether to skip blockquote or not.\n  if (type.name === 'Blockquote') {\n    return false\n  }\n\n  if (type.name !== 'ListMark') {\n    return\n  }\n\n  const line = state.doc.lineAt(from)\n  const lineStart = line.from\n  const marker = state.sliceDoc(from, to)\n  const markerStart = from\n  const markerEnd = to\n  const markerHasTrailingSpace = state.sliceDoc(markerEnd, markerEnd + 1) === ' '\n  const indentation = markerStart - lineStart\n\n  if (!markerHasTrailingSpace) {\n    return\n  }\n\n  const indentLevel = Math.floor(indentation / tabSize)\n  const spacerDecorations = <Range<Decoration>[]>[]\n\n  for (const index of Array(indentLevel).keys()) {\n    const from = lineStart + (index * tabSize)\n    const to = from + tabSize\n\n    const spacerDec = Decoration.replace({ widget: spacerWidget() }).range(from, to)\n\n    spacerDecorations.push(spacerDec)\n  }\n\n  return {\n    indentLevel,\n    indentation,\n    lineStart,\n    marker,\n    markerEnd,\n    markerStart,\n    spacerDecorations,\n  }\n}\n\nconst bulletLists = (): Extension => {\n  const decorate = (state: EditorState): [DecorationSet, DecorationSet] => {\n    const atomicRanges = <Range<Decoration>[]>[]\n    const decorationRanges = <Range<Decoration>[]>[]\n\n    syntaxTree(state).iterate({\n      enter: (node) => {\n        const result = getVals(state, node)\n\n        if (!result) {\n          return result\n        }\n\n        const { indentLevel, lineStart, marker, markerEnd, markerStart, spacerDecorations } = result\n\n        if (!['-', '*'].includes(marker)) {\n          return\n        }\n\n        const lineDec = Decoration.line({\n          attributes: {\n            class: 'ink-mde-list ink-mde-bullet-list',\n            style: `--indent-level: ${indentLevel}`,\n          },\n        }).range(lineStart)\n\n        decorationRanges.push(lineDec)\n        decorationRanges.push(...spacerDecorations)\n        atomicRanges.push(...spacerDecorations)\n\n        const textStart = markerEnd + 1\n        const dotDec = Decoration.replace({\n          widget: dotWidget(),\n        }).range(markerStart, textStart)\n\n        decorationRanges.push(dotDec)\n        atomicRanges.push(dotDec)\n      },\n    })\n\n    return [Decoration.set(decorationRanges, true), Decoration.set(atomicRanges, true)]\n  }\n\n  const stateField = StateField.define<[DecorationSet, DecorationSet]>({\n    create(state) {\n      return decorate(state)\n    },\n    update(_references, { state }) {\n      return decorate(state)\n    },\n    provide(field) {\n      const result = [\n        EditorView.decorations.of((view) => {\n          const [decorationRanges, _atomicRanges] = view.state.field(field)\n\n          return decorationRanges\n        }),\n        EditorView.atomicRanges.of((view) => {\n          const [_decorationRanges, atomicRanges] = view.state.field(field)\n\n          return atomicRanges\n        }),\n      ]\n\n      return result\n    },\n  })\n\n  return [\n    stateField,\n  ]\n}\n\nconst numberLists = (): Extension => {\n  const decorate = (state: EditorState): [DecorationSet, DecorationSet] => {\n    const atomicRanges = <Range<Decoration>[]>[]\n    const decorationRanges = <Range<Decoration>[]>[]\n\n    syntaxTree(state).iterate({\n      enter: (node) => {\n        const result = getVals(state, node)\n\n        if (!result) {\n          return result\n        }\n\n        const { indentLevel, lineStart, marker, markerEnd, markerStart, spacerDecorations } = result\n\n        if (['-', '*'].includes(marker)) {\n          return\n        }\n\n        const lineDec = Decoration.line({\n          attributes: {\n            class: 'ink-mde-list ink-mde-number-list',\n            style: `--indent-level: ${indentLevel}`,\n          },\n        }).range(lineStart)\n\n        decorationRanges.push(lineDec)\n        decorationRanges.push(...spacerDecorations)\n        atomicRanges.push(...spacerDecorations)\n\n        const textStart = markerEnd + 1\n        const dotDec = Decoration.replace({\n          widget: numberWidget(marker),\n        }).range(markerStart, textStart)\n\n        decorationRanges.push(dotDec)\n        atomicRanges.push(dotDec)\n      },\n    })\n\n    return [Decoration.set(decorationRanges, true), Decoration.set(atomicRanges, true)]\n  }\n\n  const stateField = StateField.define<[DecorationSet, DecorationSet]>({\n    create(state) {\n      return decorate(state)\n    },\n    update(_references, { state }) {\n      return decorate(state)\n    },\n    provide(field) {\n      const result = [\n        EditorView.decorations.of((view) => {\n          const [decorationRanges, _atomicRanges] = view.state.field(field)\n\n          return decorationRanges\n        }),\n        EditorView.atomicRanges.of((view) => {\n          const [_decorationRanges, atomicRanges] = view.state.field(field)\n\n          return atomicRanges\n        }),\n      ]\n\n      return result\n    },\n  })\n\n  return [\n    stateField,\n  ]\n}\n\nconst taskLists = (): Extension => {\n  const decorate = (state: EditorState): [DecorationSet, DecorationSet] => {\n    const atomicRanges = <Range<Decoration>[]>[]\n    const decorationRanges = <Range<Decoration>[]>[]\n\n    syntaxTree(state).iterate({\n      enter: (node) => {\n        const result = getVals(state, node)\n\n        if (!result) {\n          return result\n        }\n\n        const { indentLevel, lineStart, marker, markerEnd, markerStart, spacerDecorations } = result\n\n        if (!['-', '*'].includes(marker)) {\n          return\n        }\n\n        const taskStart = markerEnd + 1\n        const taskEnd = taskStart + 3\n        const task = state.sliceDoc(taskStart, taskEnd)\n\n        if (!['[ ]', '[x]'].includes(task)) {\n          return\n        }\n\n        const textStart = taskEnd + 1\n        const taskHasTrailingSpace = state.sliceDoc(taskEnd, textStart) === ' '\n\n        if (!taskHasTrailingSpace) {\n          return\n        }\n\n        const isChecked = task === '[x]'\n\n        const lineDec = Decoration.line({\n          attributes: {\n            class: `ink-mde-list ink-mde-task-list ${isChecked ? 'ink-mde-task-checked' : 'ink-mde-task-unchecked'}`,\n            style: `--indent-level: ${indentLevel}`,\n          },\n        }).range(lineStart)\n\n        decorationRanges.push(lineDec)\n        decorationRanges.push(...spacerDecorations)\n        atomicRanges.push(...spacerDecorations)\n\n        const taskDec = Decoration.replace({\n          widget: taskWidget(isChecked),\n        }).range(markerStart, textStart)\n\n        decorationRanges.push(taskDec)\n        atomicRanges.push(taskDec)\n      },\n    })\n\n    return [Decoration.set(decorationRanges, true), Decoration.set(atomicRanges, true)]\n  }\n\n  const viewPlugin = ViewPlugin.define(() => ({}), {\n    eventHandlers: {\n      mousedown: (event, view) => {\n        const target = event.target as HTMLElement\n        const realTarget = target.closest('.ink-mde-list-marker')?.querySelector('.ink-mde-task-marker')\n\n        if (realTarget) {\n          const position = view.posAtDOM(realTarget)\n          const from = position - 4\n          const to = position - 1\n          const before = view.state.sliceDoc(from, to)\n\n          if (before === '[ ]') {\n            view.dispatch({\n              changes: {\n                from,\n                to,\n                insert: '[x]',\n              },\n            })\n          }\n\n          if (before === '[x]') {\n            view.dispatch({\n              changes: {\n                from,\n                to,\n                insert: '[ ]',\n              },\n            })\n          }\n\n          return true\n        }\n      },\n    },\n  })\n\n  const stateField = StateField.define<[DecorationSet, DecorationSet]>({\n    create(state) {\n      return decorate(state)\n    },\n    update(_references, { state }) {\n      return decorate(state)\n    },\n    provide(field) {\n      const result = [\n        EditorView.decorations.of((view) => {\n          const [decorationRanges, _atomicRanges] = view.state.field(field)\n\n          return decorationRanges\n        }),\n        EditorView.atomicRanges.of((view) => {\n          const [_decorationRanges, atomicRanges] = view.state.field(field)\n\n          return atomicRanges\n        }),\n      ]\n\n      return result\n    },\n  })\n\n  return [\n    viewPlugin,\n    stateField,\n  ]\n}\n\nexport const lists = (config: { task: boolean, bullet: boolean, number: boolean }): Extension => {\n  return [\n    config.task ? taskLists() : [],\n    config.bullet ? bulletLists() : [],\n    config.number ? numberLists() : [],\n    EditorView.theme({\n      ':where(.ink-mde-indent)': {\n        display: 'inline-flex',\n        justifyContent: 'center',\n      },\n      ':where(.ink-mde-indent-marker)': {\n        borderLeft: '1px solid var(--ink-internal-syntax-processing-instruction-color)',\n        bottom: '0',\n        overflow: 'hidden',\n        position: 'absolute',\n        top: '0',\n        width: '0',\n      },\n      ':where(.ink-mde-list)': {\n        paddingLeft: 'calc(var(--indent-level) * 2rem + 2rem) !important',\n        position: 'relative',\n        textIndent: 'calc((var(--indent-level) * 2rem + 2rem) * -1)',\n      },\n      ':where(.ink-mde-list *)': {\n        textIndent: '0',\n      },\n      ':where(.ink-mde-list-marker)': {\n        alignItems: 'center',\n        color: 'var(--ink-internal-syntax-processing-instruction-color)',\n        display: 'inline-flex',\n        justifyContent: 'center',\n        minWidth: '2rem',\n      },\n      ':where(.ink-mde-task-marker)': {\n        cursor: 'pointer',\n        margin: '0',\n        scale: '1.2',\n        transformOrigin: 'center center',\n      },\n      ':where(.ink-mde-task-list.ink-mde-task-checked)': {\n        textDecoration: 'line-through',\n        textDecorationColor: 'var(--ink-internal-syntax-processing-instruction-color)',\n      },\n    }),\n  ]\n}\n"],"names":["from","to"],"mappings":"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"}